//O(N) 

vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> result;
        if(intervals.size() ==0){
            return result;
        }
        sort(intervals.begin(),intervals.end());
        vector<int> temp = intervals[0];
        
        for(auto it: intervals){
            if(it[0]<=temp[1]){
                temp[1] = max(it[1], temp[1]);
            }
            else{
                result.push_back(temp);
                temp = it;
            }
        }
        
        result.push_back(temp);
        return result;
    }
    
    
    //O(N^2) - TLE as vector.erase() is O(N)

vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        sort(intervals.begin(),intervals.end());
        for(int i=1;i<n;i++){
            if(intervals[i][0] < intervals[i-1][1]){
                if(intervals[i][1] > intervals[i-1][1]){
                    intervals[i-1][1] = intervals[i][1];
                }
                intervals.erase(intervals.begin()+i);
                i--;
                n--;
                
            }
            else if(intervals[i][0] == intervals[i-1][1]){
                if(intervals[i][1]> intervals[i-1][1]){
                    intervals[i-1][1] = intervals[i][1];
                }
                intervals.erase(intervals.begin()+i);
                i--;
                n--;
                
            }
        }
        
        return intervals;
    }
