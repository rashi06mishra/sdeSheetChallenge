//BOYER MOORE ALGO TC:O(N) SC:O(1)
vector<int> majorityElement(vector<int>& nums) {
        int num1=-1,num2=-1,cnt1=0,cnt2=0, n = nums.size();
        for(int i=0;i<n;i++){
            
            if(nums[i]==num1){
                cnt1++;
            }
            else if(nums[i]==num2){
                cnt2++;
            }
            else if(cnt1==0){
                num1 = nums[i];
                cnt1=1;
            }
            else if(cnt2==0){
                num2=nums[i];
                cnt2=1;
            }
            else{
                cnt1--;
                cnt2--;
            }
        }
        vector<int> ans;
        cnt1=0;
        cnt2=0;
        for(int i=0;i<n;i++){
            if(num1!=num2){
                if(nums[i]==num1){
                    cnt1++;
                }
                if(nums[i]==num2){
                    cnt2++;
                }
            }
            else{
                if(nums[i]==num1){
                    cnt1++;
                }
            }
        }
        if(cnt1>(n/3)){
            ans.push_back(num1);
        }
        if(cnt2>(n/3)){
            ans.push_back(num2);
        }
        
        return ans;
    }

// tc:O(n^2)
count number of each element by iteration through the array for each element
//TC: O(NLOGN) || O(N) SC: O(N)
using map or frequency array 
vector<int> majorityElement(vector<int>& nums) {
        map<int,int> m;
        int n = nums.size();
        for(int i=0;i<n;i++){
            m[nums[i]]++;
        }
        vector<int> ans;
        
        for(auto i:m){
            if(i.second > n/3){
                ans.push_back(i.first);
            }
        }
        
        return ans;
    }
